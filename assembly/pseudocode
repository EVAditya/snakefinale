data:
0-7 led lighting info
8 snake head
8-72 snake coords

registers r0 to r15
r8  (LENGTH) holds length of the snake
r9 (HEAD) holds snake head
r10 (FRUIT) holds fruit position
r11 (INPUT) holds input from the user
r12 (OLD_INP) holds old input

; Change DOWN, UP, LEFT RIGHT to their respective values
;change MEM_INP parameter

UP - 1
DOWN - 2
LEFT - 3
RIGHT - 0
MEM_INP - 255

main:

init:


every_loop:



software_timer_init:
ldi r0, 255
ldi r1, 0
ldi r2, 0
ldi r3, 0 ; gibberish instructions to fill the delay
ldi r4, 1


software_timer_inner_loop:
addi r2, 1
add r3, r4
add r3, r4
f r2, r0
jne software_timer_inner_loop

software_timer_outer_loop:
addi r1, 1
add r3, r4
add r3, r4
f r1, r0
jne software_timer_inner_loop

read_input:
ld LENGTH, MEM_LENGTH
ld OLD_INP, MEM_OLDINP
ld INPUT, MEM_INP ; Change input parameter in the end


ldi r13, DOWN
f INPUT, r13
je down
ldi r13, LEFT
f INPUT, r13
je left
ldi r13, UP
f INPUT, r13
je up
ldi r13, RIGHT
f INPUT, r13
je right

down:
ldi r13, UP
f OLD_INP, r13
je check_head
addi HEAD, 1
j check_head

// check for left, right and up, this is ai generated

left:
ldi r13, RIGHT
f OLD_INP, r13
je check_head
addi HEAD, 240 ; subtracting 10000 from HEAD
j check_head

right:
ldi r13, LEFT
f OLD_INP, r13
je check_head
addi HEAD, 16
j check_head

up:
ldi r13, DOWN
f OLD_INP, r13
je check_head
addi HEAD, 255 ; Subtracting 1 from HEAD
j check_head



check_head: 
col r0, HEAD ; Checks if wall is not hit
ldi r1, 8 
f r0, r1
je game_over
ldi r1, 15
f r0, r1
je game_over

row r0, HEAD
ldi r1, 8
f r0, r1
je game_over
ldi r1, 15
f r0, r1
je game_over


st LENGTH, MEM_LENGTH ; Store the length of the snake as backup  if snake eats fruit it is stored again
ldi r0, 8 ; head  = 8(if LENGTH=1 it will give head address)
add r0, LENGTH ; Find the tail + 1 position
ldi r5, 1 ; Loop ends when LENGHT=1 
f FRUIT, HEAD
jne snake_move ; Defualt je extend

extend:
lfsr FRUIT
addi r0, 255 ; last tail coord
ld r2, r0 ;loads tail coord
addi r0, 1 ; new tail coord
st r2, r0
addi LENGTH, 1
st LENGTH, MEM_LENGTH
addi LENGTH, 255 ; LENGTH--


snake_move:
addi r0, 254
ld r2, r0
addi r0, 1
st r2, r0
addi LENGTH, 255 ; LENGTH--
f r5, LENGTH
jne snake_move

snake_head:
addi r0, 255
st HEAD, r0
j leds

if_fruit_in_snake:
lfsr FRUIT

leds:
st LENGTH, MEM_LENGTH
ldi r0, 8 ; Starting from HEAD
ldi r5, 0

fruit:
row r1, FRUIT
col r2, FRUIT
ld r3, r1
incl r3, r2
st r3, r1

loop:
ld HEAD, r0 ; HEAD holds all the coordinates in loop
f HEAD, FRUIT
je if_fruit_in_snake
row r1, HEAD ; memory location of the led byte
col r2, HEAD
ld r3, r1
incl r3,r2
st r3,r1 ; New LED (r3) back to memory (r1)
addi r0, 1 ; Continuing with the body
addi LENGTH, 255
f r5, LENGTH
jne loop


j main ; Loop back to main
